buildscript {
    ext.WPI_VER = "2022.4.1"
    ext.libName = "cshcyberhawks.swolib"
    ext.libVersion = "1.0.0"
}

plugins {
    id "edu.wpi.first.GradleRIO" version "2022.2.1"
    id 'java'
    id "org.jetbrains.kotlin.jvm" version "1.6.21"
    id 'maven-publish'
    id "org.jetbrains.dokka" version "1.6.21"
}

version = "${libVersion}"
group = "${libName}"

sourceCompatibility = 11
targetCompatibility = 11

deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

repositories {
    mavenCentral()
    maven { url 'https://www.jitpack.io' }
}

dependencies {
    dokkaHtmlPlugin("org.jetbrains.dokka:kotlin-as-java-plugin:1.6.21")
    implementation 'junit:junit:4.13.2'

    //wpi
    implementation wpi.java.deps.wpilib()
   implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
   nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
   simulationDebug wpi.sim.enableDebug()

   nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
   nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
   simulationRelease wpi.sim.enableRelease()

   implementation "edu.wpi.first.ntcore:ntcore-java:${WPI_VER}"
   implementation "edu.wpi.first.wpiutil:wpiutil-java:${WPI_VER}"
   runtimeOnly "edu.wpi.first.ntcore:ntcore-jni:${WPI_VER}:windowsx86"
   runtimeOnly "edu.wpi.first.ntcore:ntcore-jni:${WPI_VER}:windowsx86-64"
   runtimeOnly "edu.wpi.first.ntcore:ntcore-jni:${WPI_VER}:linuxx86-64"
   runtimeOnly "edu.wpi.first.ntcore:ntcore-jni:${WPI_VER}:osxx86-64"

    implementation "org.jetbrains.kotlin:kotlin-stdlib"

    testImplementation 'org.jetbrains.kotlin:kotlin-test'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
//    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

test {
    useJUnit()
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

tasks {
    compileKotlin {
        kotlinOptions.jvmTarget = "11"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "11"
    }
}

publishing {
    publications {
        maven(MavenPublication) {  
            groupId = "${libName}"
            artifactId = "${libName}"
            version = "${libVersion}"

            from components.java
        }
    }
}

wrapper{gradleVersion = "7.3.3"}
