import edu.wpi.first.gradlerio.GradleRIOPlugin

buildscript {
    ext.WPI_VER = "2022.4.1"
}

plugins {
    id "java"
    id "maven-publish"
    id "edu.wpi.first.GradleRIO" version "2022.4.1"
    id "org.jetbrains.kotlin.jvm" version "1.3.50"
}
group "com.CyberHawks.SwoLib"

// Maven/Jitpack configuration
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}


artifacts {
    archives sourcesJar
}


// Dependencies

repositories {
    mavenCentral()
    maven {
        name "JitPack"
        url "https://jitpack.io/"
    }
}

dependencies {
    // FRC dependencies
implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    implementation "edu.wpi.first.ntcore:ntcore-java:${WPI_VER}"
    implementation "edu.wpi.first.wpiutil:wpiutil-java:${WPI_VER}"
    runtimeOnly "edu.wpi.first.ntcore:ntcore-jni:${WPI_VER}:windowsx86"
    runtimeOnly "edu.wpi.first.ntcore:ntcore-jni:${WPI_VER}:windowsx86-64"
    runtimeOnly "edu.wpi.first.ntcore:ntcore-jni:${WPI_VER}:linuxx86-64"
    runtimeOnly "edu.wpi.first.ntcore:ntcore-jni:${WPI_VER}:osxx86-64"

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.50"
}

// deployment and GradleRIO

// define the testbots source set
sourceSets {
    testbots {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    testbotsImplementation.extendsFrom implementation
    testbotsRuntimeOnly.extendsFrom runtimeOnly
}

// // task to create robotclass.txt
// task createRobotclassTxt {
//     inputs.property("robotClass", project.hasProperty("robotClass") ? project.robotClass : "")
//     outputs.files("$buildDir/robotclass.txt")
//     doLast {
//         if (!project.hasProperty("robotClass")) {
//             throw new GradleException("Robot class not set. Pass a value in on the command line by adding -ProbotClass=<your robot class>.")
//         } else {
//             System.out.println("Using robot class " + project.robotClass)
//             new File("$buildDir/robotclass.txt").text = project.robotClass
//         }
//     }
// }
//
// deploy {
//     targets {
//         roboRIO("roborio") {
//             team = frc.getTeamOrDefault(2875)
//         }
//     }
//     // artifacts {
//     //     frcJavaArtifact('frcJava') {
//     //         targets << "roborio"
//     //         /*
//     //         IMPORTANT: With the "deploy-debug" property set (i.e. -Pdeploy-debug is on the
//     //         command line), the robot code will not start until you connect your debugger to the
//     //         robot. Connect by running the "Remote Robot Debug" run configuration which should be
//     //         shared through version control. Alternatively, remove this line and redeploy.
//     //         */
//     //         debug = project.hasProperty("deploy-debug")
//     //     }
//     //     // This is a file (generated by the task above) that contains the name of the robot class we want to deploy.
//     //     // The file then gets read by TestbotLoaderMain and it instantiates the class using
//     //     // reflection.
//     //     // TODO: Maybe a build-time check that said class file actually exists somewhere in the project?
//     //     fileArtifact('robotclassTxt') {
//     //         targets << "roborio"
//     //
//     //         file = file("$buildDir/robotclass.txt")
//     //         directory = "/home/lvuser/"
//     //
//     //         dependsOn(createRobotclassTxt)
//     //     }
//     // }
// }

jar.dependsOn(compileTestbotsJava)

jar {
    inputs.files(compileTestbotsJava.outputs.files)
    gradle.taskGraph.whenReady {
        if (gradle.taskGraph.hasTask(":deployFrcJavaRoborio") || gradle.taskGraph.hasTask(":simulateJava") || gradle.taskGraph.hasTask(":simulateExternalJava")) {
            // fully qualified task name is needed
            System.out.println("Deployment or simulation detected.")
            from((configurations.compile.collect {
                it.isDirectory() ? it : zipTree(it)
            }) + sourceSets.testbots.output)
            manifest GradleRIOPlugin.javaManifest("org.team1540.rooster.testing.TestbotLoaderMain")
        }
    }
}

//make it a jitpack dependency or whatever
afterEvaluate {
    publishing {
        publications {
            maven(MavenPublication) {
                groupId = "com.cshcyberhawks.swolib"
                artifactId = "library"
                // version = "0.3.4"

                from components.java
            }
        }
    }
}


// wrapper

wrapper {
    gradleVersion = '6.0.1'
    distributionType = Wrapper.DistributionType.ALL
}
